{"ast":null,"code":"var _jsxFileName = \"/Users/midhilkari/Desktop/Deakin-Masters-IT/Trimester-3/SIT764-Project_A&D/Weather_Update/Weather_Update/src/components/app/App.js\";\nimport React from \"react\";\nimport './App.css';\nimport Weather from '../../components/weather/weather.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../components/weather/weather-icons/css/weather-icons.css';\nimport Form from '../../components/form/form.component'; //API key for Open Weather API\n\nconst API_KEY = '62a01dc6786ac94ea6ffb947cab0d995';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault(); //Getting values from the interface page form\n\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      console.log({\n        city,\n        country\n      }); //checking if city and country are entered\n\n      if (city && country) {\n        console.log(\"calling api\");\n        const api_call = await fetch('http://api.openweathermap.org/data/2.5/find/?q=' + city + ',' + country + '&appid=62a01dc6786ac94ea6ffb947cab0d995');\n        console.log(\"fetched API response\");\n        const response = await api_call.json();\n        console.log(response); //checking for valid response - if not valid return error message\n\n        const responseCount = response.count;\n        console.log({\n          responseCount\n        });\n\n        if (responseCount != 0) {\n          const weatherIcon = await this.get_weatherIcon(response.list[0].weather[0].id);\n          const weather = await this.setWeatherBackground(response.list[0].weather[0].main);\n          console.log({\n            weatherIcon\n          });\n          this.setState({\n            city: response.list[0].name + ' ' + response.list[0].sys.country,\n            celsius: this.calCelsius(response.list[0].main.temp),\n            temp_max: this.calCelsius(response.list[0].main.temp_max),\n            temp_min: this.calCelsius(response.list[0].main.temp_min),\n            description: response.list[0].weather[0].description,\n            icon: weatherIcon\n          }); //console.log(\"Weather condition: \",response.list[0].weather[0].main)\n          //console.log(setWeatherBackground)\n        } else {\n          this.setState({\n            error: true\n          });\n        }\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      weather: undefined,\n      description: \"\",\n      error: false,\n      errorCity: false\n    }; //Icons for different weather conditions dowloaded from erik flowers\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  } //synchronously calling weather api\n\n\n  setWeatherBackground(weather) {\n    console.log(weather);\n\n    switch (true) {\n      case weather == \"Smoke\":\n        console.log(\"It is Smoke!\");\n        return React.createElement(\"div\", {\n          style: {\n            backgroundImage: 'url(\"../../assets/img1.jpg\")',\n            width: '300px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n        break;\n\n      case weather == \"Clear\":\n        console.log(\"It is clear\");\n        break;\n\n      default:\n        console.log(\"not received\");\n    }\n  }\n  /*if(weather == \"Smoke\"){\n  console.log(\"It is smoke\")\n  }elseif(weather == \"Clouds\"){\n    console.log(\"It is clouds\");\n  }elseif(weather == \"Clear\"){\n    console.log(\"NOt Smoke\");\n  }\n  }*/\n  //function to convert temparature into celsius\n\n\n  calCelsius(temp) {\n    console.log(\"Received temparature in kelvins\");\n    let cell = Math.floor(temp - 273.15);\n    console.log(\"converted to celsius\");\n    return cell;\n  } //function to get appropriate icons based on the weather conditions\n\n\n  get_weatherIcon(rangeId) {\n    console.log({\n      rangeId\n    }, \"assigning weather icon\");\n    let weatherIcon = null;\n\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        weatherIcon = this.weatherIcon.Thunderstorm;\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        weatherIcon = this.weatherIcon.Drizzle;\n        break;\n\n      case rangeId >= 500 && rangeId <= 532:\n        weatherIcon = this.weatherIcon.Rain;\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        weatherIcon = this.weatherIcon.Snow;\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        weatherIcon = this.weatherIcon.Atmosphere;\n        break;\n\n      case rangeId === 800:\n        weatherIcon = this.weatherIcon.Clear;\n        break;\n\n      case rangeId >= 800 && rangeId <= 804:\n        weatherIcon = this.weatherIcon.Clouds;\n        break;\n\n      default:\n        weatherIcon = this.weatherIcon.Clear;\n    }\n\n    return weatherIcon;\n  }\n\n  render() {\n    console.log({\n      state: this.state\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      city: this.state.city,\n      country: this.state.country,\n      icon: this.state.icon,\n      temp_celsius: this.state.celsius,\n      temp_max: this.state.temp_max,\n      temp_min: this.state.temp_min,\n      description: this.state.description,\n      weatherState: this.state.weatherState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/midhilkari/Desktop/Deakin-Masters-IT/Trimester-3/SIT764-Project_A&D/Weather_Update/Weather_Update/src/components/app/App.js"],"names":["React","Weather","Form","API_KEY","App","Component","constructor","getWeather","e","preventDefault","city","target","elements","value","country","console","log","api_call","fetch","response","json","responseCount","count","weatherIcon","get_weatherIcon","list","weather","id","setWeatherBackground","main","setState","name","sys","celsius","calCelsius","temp","temp_max","temp_min","description","icon","error","state","undefined","errorCity","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","backgroundImage","width","cell","Math","floor","rangeId","render","weatherState"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './App.css';\nimport Weather from '../../components/weather/weather.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../components/weather/weather-icons/css/weather-icons.css';\nimport Form from '../../components/form/form.component';\n\n//API key for Open Weather API\nconst API_KEY = '62a01dc6786ac94ea6ffb947cab0d995';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      weather: undefined,\n      description : \"\",\n      error : false,\n      errorCity:false\n    };\n    \n    //Icons for different weather conditions dowloaded from erik flowers\n    this.weatherIcon= {\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\",\n    };\n    \n    \n  }\n  \n  //synchronously calling weather api\n  getWeather = async(e)=>{\n\n    e.preventDefault();\n    \n    //Getting values from the interface page form\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    console.log({city,country})\n\n    //checking if city and country are entered\n    if(city && country){\n      console.log(\"calling api\")\n      const api_call = await fetch('http://api.openweathermap.org/data/2.5/find/?q='+city+','+country+'&appid=62a01dc6786ac94ea6ffb947cab0d995');\n      console.log(\"fetched API response\")\n      const response = await api_call.json();\n      console.log(response);\n      //checking for valid response - if not valid return error message\n      const responseCount = response.count;\n      console.log({responseCount})\n      if(responseCount!=0){\n        const weatherIcon = await this.get_weatherIcon(response.list[0].weather[0].id);\n        const weather = await this.setWeatherBackground(response.list[0].weather[0].main);\n        console.log({weatherIcon})\n        this.setState({\n          city:response.list[0].name + ' '+response.list[0].sys.country,\n          celsius: this.calCelsius(response.list[0].main.temp),\n          temp_max: this.calCelsius(response.list[0].main.temp_max),\n          temp_min: this.calCelsius(response.list[0].main.temp_min),\n          description: response.list[0].weather[0].description,\n          icon: weatherIcon,\n          \n        });\n        //console.log(\"Weather condition: \",response.list[0].weather[0].main)\n        //console.log(setWeatherBackground)\n      }else{\n        this.setState({error:true});\n      }\n    }else{\n      this.setState({error:true});\n    }\n  }\n\n  setWeatherBackground(weather){\n    console.log(weather)\n    switch(true){\n      case weather ==\"Smoke\":\n      console.log(\"It is Smoke!\")\n      return (\n        <div style={{\n          backgroundImage: 'url(\"../../assets/img1.jpg\")',\n          width: '300px'\n        }}></div>\n      )\n      break;\n      case weather == \"Clear\":\n      console.log(\"It is clear\")\n      break;\n      default:\n      console.log(\"not received\")\n\n    }\n  }\n    /*if(weather == \"Smoke\"){\n    console.log(\"It is smoke\")\n    }elseif(weather == \"Clouds\"){\n      console.log(\"It is clouds\");\n    }elseif(weather == \"Clear\"){\n      console.log(\"NOt Smoke\");\n    }\n    }*/\n  \n\n\n  //function to convert temparature into celsius\n  calCelsius(temp){\n    console.log(\"Received temparature in kelvins\");\n    let cell = Math.floor(temp - 273.15)\n    console.log(\"converted to celsius\");\n    return cell;\n  }\n  \n  //function to get appropriate icons based on the weather conditions\n  get_weatherIcon(rangeId){\n    console.log({rangeId}, \"assigning weather icon\");\n    let weatherIcon = null;\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232:\n        weatherIcon = this.weatherIcon.Thunderstorm\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        weatherIcon = this.weatherIcon.Drizzle\n        break;\n      case rangeId >= 500 && rangeId <= 532:\n        weatherIcon = this.weatherIcon.Rain\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        weatherIcon = this.weatherIcon.Snow\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        weatherIcon = this.weatherIcon.Atmosphere\n        break;\n      case rangeId === 800:\n        weatherIcon = this.weatherIcon.Clear\n        break;\n      case rangeId >= 800 && rangeId <= 804:\n        weatherIcon = this.weatherIcon.Clouds\n        break;\n      default:\n        weatherIcon = this.weatherIcon.Clear\n    }\n    return weatherIcon;\n  }\n\n  render(){\n    console.log({state: this.state})\n    return(\n      <div className=\"App\">\n        {/* <img src={require('../../assets/img2.jpg')} alt=\"loading...\" /> */}\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather \n        city={this.state.city} \n        country={this.state.country}\n        icon= {this.state.icon}\n        temp_celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherState={this.state.weatherState}\n        \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}