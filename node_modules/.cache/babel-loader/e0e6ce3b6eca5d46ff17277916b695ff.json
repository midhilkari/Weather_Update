{"ast":null,"code":"var _jsxFileName = \"/Users/midhilkari/Desktop/Deakin-Masters-IT/Trimester-3/SIT764-Project_A&D/weather-app/src/App.js\";\nimport React from \"react\";\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './weather-icons/css/weather-icons.css';\nimport Form from './app_component/form.component';\nlet myHeaders = new Headers();\nconst myInit = {\n  method: 'GET',\n  headers: myHeaders,\n  mode: 'no-cors',\n  cache: 'default'\n};\nconst API_KEY = \"c54d675afed54f542494d45469f12850\"; //const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n//const targetUrl  = 'http://samples.openweathermap.org/data/2.5/weather?q=${city},&{country}&appid=${API_KEY}';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n\n      if (city && country) {\n        fetch('http://samples.openweathermap.org/data/2.5/weather?q=${city},&{country}&appid=${API_KEY}', myInit).then(function (response) {\n          console.log(response);\n        }).catch(function (error) {\n          console.log('Request failed', error);\n        }); //const response = await api_call.json();\n        //console.log(response);      \n\n        this.setState({\n          city: '${response.name},${response.sys.country}',\n          celsius: this.calCelsius(response.main.temp),\n          temp_max: this.calCelsius(response.main.temp_max),\n          temp_min: this.calCelsius(response.main.temp_min),\n          description: response.weather[0].description //icon: this.weatherIcon.Thunderstorm\n\n        });\n        this.get_weatherIcon(this.weatherIcon, response.weather[0].id);\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp) {\n    console.log(\"got temp\");\n    let celsius = Math.floor(temp - 273.15);\n    console.log(\"converted to celsius\");\n    return celsius;\n  }\n\n  get_weatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 532:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeId >= 800 && rangeId <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n    }\n  }\n\n  //state = {};\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      city: this.state.city,\n      country: this.state.country,\n      temp_celsius: this.state.temp_celsius,\n      temp_max: this.state.temp_max,\n      temp_min: this.state.temp_min,\n      description: this.state.description,\n      weatherIcon: this.state.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/midhilkari/Desktop/Deakin-Masters-IT/Trimester-3/SIT764-Project_A&D/weather-app/src/App.js"],"names":["React","Weather","Form","myHeaders","Headers","myInit","method","headers","mode","cache","API_KEY","App","Component","constructor","getWeather","e","preventDefault","city","target","elements","value","country","fetch","then","response","console","log","catch","error","setState","celsius","calCelsius","main","temp","temp_max","temp_min","description","weather","get_weatherIcon","weatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","render","temp_celsius"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './weather-icons/css/weather-icons.css';\nimport Form from './app_component/form.component';\n\nlet myHeaders = new Headers();\nconst myInit = {\n  method: 'GET',\n  headers: myHeaders,\n  mode: 'no-cors',\n  cache: 'default'\n};\n\n\nconst API_KEY = \"c54d675afed54f542494d45469f12850\";\n//const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n//const targetUrl  = 'http://samples.openweathermap.org/data/2.5/weather?q=${city},&{country}&appid=${API_KEY}';\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description : \"\",\n      error : false\n    };\n    \n\n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\",\n    };\n  }\n\n  calCelsius(temp){\n    console.log(\"got temp\");\n    let celsius = Math.floor(temp - 273.15)\n    console.log(\"converted to celsius\");\n    return celsius;\n  }\n\n  get_weatherIcon(icons,rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeId >= 500 && rangeId <= 532:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeId === 800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeId >= 800 && rangeId <= 804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon:this.weatherIcon.Clear});\n    }\n  }\n\n  \n  getWeather = async(e)=>{\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city && country){\n      fetch('http://samples.openweathermap.org/data/2.5/weather?q=${city},&{country}&appid=${API_KEY}',myInit)\n      .then(function(response) {\n        console.log(response); \n      }).catch(function(error) {  \n        console.log('Request failed', error)  \n      });\n\n      //const response = await api_call.json();\n      //console.log(response);      \n\n      this.setState({\n        city:'${response.name},${response.sys.country}',\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description\n        //icon: this.weatherIcon.Thunderstorm\n        \n      });\n      this.get_weatherIcon(this.weatherIcon,response.weather[0].id);\n    }else{\n      this.setState({error:true});\n    }\n    \n  }\n\n\n  //state = {};\n  render(){\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather \n        city={this.state.city} \n        country={this.state.country}\n        temp_celsius={this.state.temp_celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon= {this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}